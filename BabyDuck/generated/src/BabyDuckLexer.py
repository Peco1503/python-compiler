# Generated from ./src/BabyDuck.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,36,222,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,
        1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,
        1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,
        1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,
        1,11,1,11,1,11,1,11,1,12,1,12,5,12,135,8,12,10,12,12,12,138,9,12,
        1,13,4,13,141,8,13,11,13,12,13,142,1,14,4,14,146,8,14,11,14,12,14,
        147,1,14,1,14,4,14,152,8,14,11,14,12,14,153,1,15,1,15,5,15,158,8,
        15,10,15,12,15,161,9,15,1,15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,
        1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,
        1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,
        1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,4,34,206,8,34,11,34,
        12,34,207,1,34,1,34,1,35,1,35,1,35,1,35,5,35,216,8,35,10,35,12,35,
        219,9,35,1,35,1,35,0,0,36,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,
        9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,
        20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,
        31,63,32,65,33,67,34,69,35,71,36,1,0,6,2,0,65,90,97,122,4,0,48,57,
        65,90,95,95,97,122,1,0,48,57,3,0,10,10,13,13,34,34,3,0,9,10,13,13,
        32,32,2,0,10,10,13,13,228,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,
        7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,
        1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,
        1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,
        1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,
        1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
        1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,
        1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,1,73,1,0,0,0,3,81,1,0,0,0,5,86,
        1,0,0,0,7,90,1,0,0,0,9,93,1,0,0,0,11,98,1,0,0,0,13,104,1,0,0,0,15,
        107,1,0,0,0,17,113,1,0,0,0,19,118,1,0,0,0,21,122,1,0,0,0,23,128,
        1,0,0,0,25,132,1,0,0,0,27,140,1,0,0,0,29,145,1,0,0,0,31,155,1,0,
        0,0,33,164,1,0,0,0,35,166,1,0,0,0,37,168,1,0,0,0,39,170,1,0,0,0,
        41,172,1,0,0,0,43,174,1,0,0,0,45,176,1,0,0,0,47,179,1,0,0,0,49,182,
        1,0,0,0,51,185,1,0,0,0,53,188,1,0,0,0,55,190,1,0,0,0,57,192,1,0,
        0,0,59,194,1,0,0,0,61,196,1,0,0,0,63,198,1,0,0,0,65,200,1,0,0,0,
        67,202,1,0,0,0,69,205,1,0,0,0,71,211,1,0,0,0,73,74,5,112,0,0,74,
        75,5,114,0,0,75,76,5,111,0,0,76,77,5,103,0,0,77,78,5,114,0,0,78,
        79,5,97,0,0,79,80,5,109,0,0,80,2,1,0,0,0,81,82,5,109,0,0,82,83,5,
        97,0,0,83,84,5,105,0,0,84,85,5,110,0,0,85,4,1,0,0,0,86,87,5,101,
        0,0,87,88,5,110,0,0,88,89,5,100,0,0,89,6,1,0,0,0,90,91,5,105,0,0,
        91,92,5,102,0,0,92,8,1,0,0,0,93,94,5,101,0,0,94,95,5,108,0,0,95,
        96,5,115,0,0,96,97,5,101,0,0,97,10,1,0,0,0,98,99,5,119,0,0,99,100,
        5,104,0,0,100,101,5,105,0,0,101,102,5,108,0,0,102,103,5,101,0,0,
        103,12,1,0,0,0,104,105,5,100,0,0,105,106,5,111,0,0,106,14,1,0,0,
        0,107,108,5,112,0,0,108,109,5,114,0,0,109,110,5,105,0,0,110,111,
        5,110,0,0,111,112,5,116,0,0,112,16,1,0,0,0,113,114,5,118,0,0,114,
        115,5,111,0,0,115,116,5,105,0,0,116,117,5,100,0,0,117,18,1,0,0,0,
        118,119,5,105,0,0,119,120,5,110,0,0,120,121,5,116,0,0,121,20,1,0,
        0,0,122,123,5,102,0,0,123,124,5,108,0,0,124,125,5,111,0,0,125,126,
        5,97,0,0,126,127,5,116,0,0,127,22,1,0,0,0,128,129,5,118,0,0,129,
        130,5,97,0,0,130,131,5,114,0,0,131,24,1,0,0,0,132,136,7,0,0,0,133,
        135,7,1,0,0,134,133,1,0,0,0,135,138,1,0,0,0,136,134,1,0,0,0,136,
        137,1,0,0,0,137,26,1,0,0,0,138,136,1,0,0,0,139,141,7,2,0,0,140,139,
        1,0,0,0,141,142,1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,28,1,
        0,0,0,144,146,7,2,0,0,145,144,1,0,0,0,146,147,1,0,0,0,147,145,1,
        0,0,0,147,148,1,0,0,0,148,149,1,0,0,0,149,151,5,46,0,0,150,152,7,
        2,0,0,151,150,1,0,0,0,152,153,1,0,0,0,153,151,1,0,0,0,153,154,1,
        0,0,0,154,30,1,0,0,0,155,159,5,34,0,0,156,158,8,3,0,0,157,156,1,
        0,0,0,158,161,1,0,0,0,159,157,1,0,0,0,159,160,1,0,0,0,160,162,1,
        0,0,0,161,159,1,0,0,0,162,163,5,34,0,0,163,32,1,0,0,0,164,165,5,
        43,0,0,165,34,1,0,0,0,166,167,5,45,0,0,167,36,1,0,0,0,168,169,5,
        42,0,0,169,38,1,0,0,0,170,171,5,47,0,0,171,40,1,0,0,0,172,173,5,
        60,0,0,173,42,1,0,0,0,174,175,5,62,0,0,175,44,1,0,0,0,176,177,5,
        60,0,0,177,178,5,61,0,0,178,46,1,0,0,0,179,180,5,62,0,0,180,181,
        5,61,0,0,181,48,1,0,0,0,182,183,5,61,0,0,183,184,5,61,0,0,184,50,
        1,0,0,0,185,186,5,33,0,0,186,187,5,61,0,0,187,52,1,0,0,0,188,189,
        5,61,0,0,189,54,1,0,0,0,190,191,5,59,0,0,191,56,1,0,0,0,192,193,
        5,40,0,0,193,58,1,0,0,0,194,195,5,41,0,0,195,60,1,0,0,0,196,197,
        5,123,0,0,197,62,1,0,0,0,198,199,5,125,0,0,199,64,1,0,0,0,200,201,
        5,58,0,0,201,66,1,0,0,0,202,203,5,44,0,0,203,68,1,0,0,0,204,206,
        7,4,0,0,205,204,1,0,0,0,206,207,1,0,0,0,207,205,1,0,0,0,207,208,
        1,0,0,0,208,209,1,0,0,0,209,210,6,34,0,0,210,70,1,0,0,0,211,212,
        5,47,0,0,212,213,5,47,0,0,213,217,1,0,0,0,214,216,8,5,0,0,215,214,
        1,0,0,0,216,219,1,0,0,0,217,215,1,0,0,0,217,218,1,0,0,0,218,220,
        1,0,0,0,219,217,1,0,0,0,220,221,6,35,0,0,221,72,1,0,0,0,8,0,136,
        142,147,153,159,207,217,1,6,0,0
    ]

class BabyDuckLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PROGRAM = 1
    MAIN = 2
    END = 3
    IF = 4
    ELSE = 5
    WHILE = 6
    DO = 7
    PRINT = 8
    VOID = 9
    INT = 10
    FLOAT = 11
    VAR = 12
    ID = 13
    CTE_INT = 14
    CTE_FLOAT = 15
    CTE_STRING = 16
    PLUS = 17
    MINUS = 18
    MULT = 19
    DIV = 20
    LT = 21
    GT = 22
    LE = 23
    GE = 24
    EQ = 25
    NE = 26
    EQUAL = 27
    SEMICOLON = 28
    LPAREN = 29
    RPAREN = 30
    LBRACE = 31
    RBRACE = 32
    COLON = 33
    COMMA = 34
    WS = 35
    COMMENT = 36

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'program'", "'main'", "'end'", "'if'", "'else'", "'while'", 
            "'do'", "'print'", "'void'", "'int'", "'float'", "'var'", "'+'", 
            "'-'", "'*'", "'/'", "'<'", "'>'", "'<='", "'>='", "'=='", "'!='", 
            "'='", "';'", "'('", "')'", "'{'", "'}'", "':'", "','" ]

    symbolicNames = [ "<INVALID>",
            "PROGRAM", "MAIN", "END", "IF", "ELSE", "WHILE", "DO", "PRINT", 
            "VOID", "INT", "FLOAT", "VAR", "ID", "CTE_INT", "CTE_FLOAT", 
            "CTE_STRING", "PLUS", "MINUS", "MULT", "DIV", "LT", "GT", "LE", 
            "GE", "EQ", "NE", "EQUAL", "SEMICOLON", "LPAREN", "RPAREN", 
            "LBRACE", "RBRACE", "COLON", "COMMA", "WS", "COMMENT" ]

    ruleNames = [ "PROGRAM", "MAIN", "END", "IF", "ELSE", "WHILE", "DO", 
                  "PRINT", "VOID", "INT", "FLOAT", "VAR", "ID", "CTE_INT", 
                  "CTE_FLOAT", "CTE_STRING", "PLUS", "MINUS", "MULT", "DIV", 
                  "LT", "GT", "LE", "GE", "EQ", "NE", "EQUAL", "SEMICOLON", 
                  "LPAREN", "RPAREN", "LBRACE", "RBRACE", "COLON", "COMMA", 
                  "WS", "COMMENT" ]

    grammarFileName = "BabyDuck.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


