# Generated from ./src/BabyDuck.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,33,207,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,
        2,1,2,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,
        6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,
        9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,12,1,12,
        5,12,129,8,12,10,12,12,12,132,9,12,1,13,4,13,135,8,13,11,13,12,13,
        136,1,14,4,14,140,8,14,11,14,12,14,141,1,14,1,14,4,14,146,8,14,11,
        14,12,14,147,1,15,1,15,5,15,152,8,15,10,15,12,15,155,9,15,1,15,1,
        15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,
        22,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,
        28,1,28,1,29,1,29,1,30,1,30,1,31,4,31,191,8,31,11,31,12,31,192,1,
        31,1,31,1,32,1,32,1,32,1,32,5,32,201,8,32,10,32,12,32,204,9,32,1,
        32,1,32,0,0,33,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,
        11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,
        22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,
        33,1,0,6,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,
        3,0,10,10,13,13,34,34,3,0,9,10,13,13,32,32,2,0,10,10,13,13,213,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
        0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
        0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,
        0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,1,67,1,0,0,0,3,75,1,0,0,0,5,80,1,
        0,0,0,7,84,1,0,0,0,9,87,1,0,0,0,11,92,1,0,0,0,13,98,1,0,0,0,15,101,
        1,0,0,0,17,107,1,0,0,0,19,112,1,0,0,0,21,116,1,0,0,0,23,122,1,0,
        0,0,25,126,1,0,0,0,27,134,1,0,0,0,29,139,1,0,0,0,31,149,1,0,0,0,
        33,158,1,0,0,0,35,160,1,0,0,0,37,162,1,0,0,0,39,164,1,0,0,0,41,166,
        1,0,0,0,43,168,1,0,0,0,45,170,1,0,0,0,47,173,1,0,0,0,49,175,1,0,
        0,0,51,177,1,0,0,0,53,179,1,0,0,0,55,181,1,0,0,0,57,183,1,0,0,0,
        59,185,1,0,0,0,61,187,1,0,0,0,63,190,1,0,0,0,65,196,1,0,0,0,67,68,
        5,112,0,0,68,69,5,114,0,0,69,70,5,111,0,0,70,71,5,103,0,0,71,72,
        5,114,0,0,72,73,5,97,0,0,73,74,5,109,0,0,74,2,1,0,0,0,75,76,5,109,
        0,0,76,77,5,97,0,0,77,78,5,105,0,0,78,79,5,110,0,0,79,4,1,0,0,0,
        80,81,5,101,0,0,81,82,5,110,0,0,82,83,5,100,0,0,83,6,1,0,0,0,84,
        85,5,105,0,0,85,86,5,102,0,0,86,8,1,0,0,0,87,88,5,101,0,0,88,89,
        5,108,0,0,89,90,5,115,0,0,90,91,5,101,0,0,91,10,1,0,0,0,92,93,5,
        119,0,0,93,94,5,104,0,0,94,95,5,105,0,0,95,96,5,108,0,0,96,97,5,
        101,0,0,97,12,1,0,0,0,98,99,5,100,0,0,99,100,5,111,0,0,100,14,1,
        0,0,0,101,102,5,112,0,0,102,103,5,114,0,0,103,104,5,105,0,0,104,
        105,5,110,0,0,105,106,5,116,0,0,106,16,1,0,0,0,107,108,5,118,0,0,
        108,109,5,111,0,0,109,110,5,105,0,0,110,111,5,100,0,0,111,18,1,0,
        0,0,112,113,5,105,0,0,113,114,5,110,0,0,114,115,5,116,0,0,115,20,
        1,0,0,0,116,117,5,102,0,0,117,118,5,108,0,0,118,119,5,111,0,0,119,
        120,5,97,0,0,120,121,5,116,0,0,121,22,1,0,0,0,122,123,5,118,0,0,
        123,124,5,97,0,0,124,125,5,114,0,0,125,24,1,0,0,0,126,130,7,0,0,
        0,127,129,7,1,0,0,128,127,1,0,0,0,129,132,1,0,0,0,130,128,1,0,0,
        0,130,131,1,0,0,0,131,26,1,0,0,0,132,130,1,0,0,0,133,135,7,2,0,0,
        134,133,1,0,0,0,135,136,1,0,0,0,136,134,1,0,0,0,136,137,1,0,0,0,
        137,28,1,0,0,0,138,140,7,2,0,0,139,138,1,0,0,0,140,141,1,0,0,0,141,
        139,1,0,0,0,141,142,1,0,0,0,142,143,1,0,0,0,143,145,5,46,0,0,144,
        146,7,2,0,0,145,144,1,0,0,0,146,147,1,0,0,0,147,145,1,0,0,0,147,
        148,1,0,0,0,148,30,1,0,0,0,149,153,5,34,0,0,150,152,8,3,0,0,151,
        150,1,0,0,0,152,155,1,0,0,0,153,151,1,0,0,0,153,154,1,0,0,0,154,
        156,1,0,0,0,155,153,1,0,0,0,156,157,5,34,0,0,157,32,1,0,0,0,158,
        159,5,43,0,0,159,34,1,0,0,0,160,161,5,45,0,0,161,36,1,0,0,0,162,
        163,5,42,0,0,163,38,1,0,0,0,164,165,5,47,0,0,165,40,1,0,0,0,166,
        167,5,60,0,0,167,42,1,0,0,0,168,169,5,62,0,0,169,44,1,0,0,0,170,
        171,5,33,0,0,171,172,5,61,0,0,172,46,1,0,0,0,173,174,5,61,0,0,174,
        48,1,0,0,0,175,176,5,59,0,0,176,50,1,0,0,0,177,178,5,40,0,0,178,
        52,1,0,0,0,179,180,5,41,0,0,180,54,1,0,0,0,181,182,5,123,0,0,182,
        56,1,0,0,0,183,184,5,125,0,0,184,58,1,0,0,0,185,186,5,58,0,0,186,
        60,1,0,0,0,187,188,5,44,0,0,188,62,1,0,0,0,189,191,7,4,0,0,190,189,
        1,0,0,0,191,192,1,0,0,0,192,190,1,0,0,0,192,193,1,0,0,0,193,194,
        1,0,0,0,194,195,6,31,0,0,195,64,1,0,0,0,196,197,5,47,0,0,197,198,
        5,47,0,0,198,202,1,0,0,0,199,201,8,5,0,0,200,199,1,0,0,0,201,204,
        1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,205,1,0,0,0,204,202,
        1,0,0,0,205,206,6,32,0,0,206,66,1,0,0,0,8,0,130,136,141,147,153,
        192,202,1,6,0,0
    ]

class BabyDuckLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    PROGRAM = 1
    MAIN = 2
    END = 3
    IF = 4
    ELSE = 5
    WHILE = 6
    DO = 7
    PRINT = 8
    VOID = 9
    INT = 10
    FLOAT = 11
    VAR = 12
    ID = 13
    CTE_INT = 14
    CTE_FLOAT = 15
    CTE_STRING = 16
    PLUS = 17
    MINUS = 18
    MULT = 19
    DIV = 20
    LT = 21
    GT = 22
    NE = 23
    EQUAL = 24
    SEMICOLON = 25
    LPAREN = 26
    RPAREN = 27
    LBRACE = 28
    RBRACE = 29
    COLON = 30
    COMMA = 31
    WS = 32
    COMMENT = 33

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'program'", "'main'", "'end'", "'if'", "'else'", "'while'", 
            "'do'", "'print'", "'void'", "'int'", "'float'", "'var'", "'+'", 
            "'-'", "'*'", "'/'", "'<'", "'>'", "'!='", "'='", "';'", "'('", 
            "')'", "'{'", "'}'", "':'", "','" ]

    symbolicNames = [ "<INVALID>",
            "PROGRAM", "MAIN", "END", "IF", "ELSE", "WHILE", "DO", "PRINT", 
            "VOID", "INT", "FLOAT", "VAR", "ID", "CTE_INT", "CTE_FLOAT", 
            "CTE_STRING", "PLUS", "MINUS", "MULT", "DIV", "LT", "GT", "NE", 
            "EQUAL", "SEMICOLON", "LPAREN", "RPAREN", "LBRACE", "RBRACE", 
            "COLON", "COMMA", "WS", "COMMENT" ]

    ruleNames = [ "PROGRAM", "MAIN", "END", "IF", "ELSE", "WHILE", "DO", 
                  "PRINT", "VOID", "INT", "FLOAT", "VAR", "ID", "CTE_INT", 
                  "CTE_FLOAT", "CTE_STRING", "PLUS", "MINUS", "MULT", "DIV", 
                  "LT", "GT", "NE", "EQUAL", "SEMICOLON", "LPAREN", "RPAREN", 
                  "LBRACE", "RBRACE", "COLON", "COMMA", "WS", "COMMENT" ]

    grammarFileName = "BabyDuck.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


